<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on 首页</title>
    <link>https://wjw66.github.io/categories/spring/</link>
    <description>Recent content in Spring on 首页</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wjw66.github.io/categories/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SpringBoot配置application.yml</title>
      <link>https://wjw66.github.io/2019/springboot%E9%85%8D%E7%BD%AEapplication.yml%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wjw66.github.io/2019/springboot%E9%85%8D%E7%BD%AEapplication.yml%E8%AF%A6%E8%A7%A3/</guid>
      <description>server: prot: 8888　#配置访问的端口 servlet: context-path: /xxx　#配置访问时的项目名 spring: devtools:　restart: enabled: true　#这个好像是热加载，每次代码有改动就自动重启，原来的restart ClassLoader 被丢弃，重新创建一个restart ClassLoader，由于需要加载的类相比较少，所以实现了较快的重启时间。 datasource: url: jdbc:mysql://localhost:3306/xxx?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;useSSL=true　#配置数据库的路径 username: root　#数据库登录名 password: root #登陆密码 type: com.alibaba.druid.pool.DruidDataSource #这个可以看一下https://blog.csdn.net/qq_27191423/article/details/79146855 driver-class-name: com.mysql.jdbc.Driver filters: stat maxActive: 20　#连接池的最大值，同一时间可以从池分配的最多连接数量，0时无限制 initialSize: 1　#连接初始值，连接池启动时创建的连接数量的初始值 maxWait: 60000 minIdle: 1　#最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 timeBetweenEvictionRunsMillis: 60000 minEvictableIdleTimeMillis: 300000 validationQuery: select &#39;x&#39; testWhileIdle: true testOnBorrow: false testOnReturn: false poolPreparedStatements: true #是否对已备语句进行池管理（布尔值），是否对PreparedStatement进行缓存 maxOpenPreparedStatements: 20 jackson: date-format: yyyy-MM-dd HH:mm:ss time-zone: GMT+8 mybatis-plus: mapper-locations: classpath*:mapper/**/*Mapper.</description>
    </item>
    
    <item>
      <title>SpringData-jpa</title>
      <link>https://wjw66.github.io/2019/spring-data-jpa%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wjw66.github.io/2019/spring-data-jpa%E8%AF%A6%E8%A7%A3/</guid>
      <description>这篇文章由于介绍的类容很全，因此很长，如果你需要，那么可以耐心的看完，本人经历了很长时间的学识，使用，研究的心血浓缩成为这么短短的一篇博客。
大致整理一个提纲：
　1、Spring-data-jpa的基本介绍；
　2、和Spring整合；
　3、基本的使用方式；
　4、复杂查询，包括多表关联，分页，排序等；
现在开始：
　1、Spring-data-jpa的基本介绍：JPA诞生的缘由是为了整合第三方ORM框架，建立一种标准的方式，百度百科说是JDK为了实现ORM的天下归一，目前也是在按照这个方向发展，但是还没能完全实现。在ORM框架中，Hibernate是一支很大的部队，使用很广泛，也很方便，能力也很强，同时Hibernate也是和JPA整合的比较良好，我们可以认为JPA是标准，事实上也是，JPA几乎都是接口，实现都是Hibernate在做，宏观上面看，在JPA的统一之下Hibernate很良好的运行。
　上面阐述了JPA和Hibernate的关系，那么Spring-data-jpa又是个什么东西呢？这地方需要稍微解释一下，我们做Java开发的都知道Spring的强大，到目前为止，企业级应用Spring几乎是无所不能，无所不在，已经是事实上的标准了，企业级应用不使用Spring的几乎没有，这样说没错吧。而Spring整合第三方框架的能力又很强，他要做的不仅仅是个最早的IOC容器这么简单一回事，现在Spring涉及的方面太广，主要是体现在和第三方工具的整合上。而在与第三方整合这方面，Spring做了持久化这一块的工作，我个人的感觉是Spring希望把持久化这块内容也拿下。于是就有了Spring-data-**这一系列包。包括，Spring-data-jpa,Spring-data-template,Spring-data-mongodb,Spring-data-redis，还有个民间产品，mybatis-spring，和前面类似，这是和mybatis整合的第三方包，这些都是干的持久化工具干的事儿。
　这里介绍Spring-data-jpa，表示与jpa的整合。
　2、我们都知道，在使用持久化工具的时候，一般都有一个对象来操作数据库，在原生的Hibernate中叫做Session，在JPA中叫做EntityManager，在MyBatis中叫做SqlSession，通过这个对象来操作数据库。我们一般按照三层结构来看的话，Service层做业务逻辑处理，Dao层和数据库打交道，在Dao中，就存在着上面的对象。那么ORM框架本身提供的功能有什么呢？答案是基本的CRUD，所有的基础CRUD框架都提供，我们使用起来感觉很方便，很给力，业务逻辑层面的处理ORM是没有提供的，如果使用原生的框架，业务逻辑代码我们一般会自定义，会自己去写SQL语句，然后执行。在这个时候，Spring-data-jpa的威力就体现出来了，ORM提供的能力他都提供，ORM框架没有提供的业务逻辑功能Spring-data-jpa也提供，全方位的解决用户的需求。使用Spring-data-jpa进行开发的过程中，常用的功能，我们几乎不需要写一条sql语句，至少在我看来，企业级应用基本上可以不用写任何一条sql，当然spring-data-jpa也提供自己写sql的方式，这个就看个人怎么选择，都可以。我觉得都行。
　2.1与Spring整合我们从spring配置文件开始，为了节省篇幅，这里我只写出配置文件的结构。
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:p=&amp;quot;http://www.springframework.org/schema/p&amp;quot; xmlns:aop=&amp;quot;http://www.springframework.org/schema/aop&amp;quot; xmlns:tx=&amp;quot;http://www.springframework.org/schema/tx&amp;quot; xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot; xmlns:mongo=&amp;quot;http://www.springframework.org/schema/data/mongo&amp;quot; xmlns:jpa=&amp;quot;http://www.springframework.org/schema/data/jpa&amp;quot; xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd&amp;quot;&amp;gt; &amp;lt;!-- 数据库连接 --&amp;gt; &amp;lt;context:property-placeholder location=&amp;quot;classpath:your-config.properties&amp;quot; ignore-unresolvable=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;!-- service包 --&amp;gt; &amp;lt;context:component-scan base-package=&amp;quot;your service package&amp;quot; /&amp;gt; &amp;lt;!-- 使用cglib进行动态代理 --&amp;gt; &amp;lt;aop:aspectj-autoproxy proxy-target-class=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;!-- 支持注解方式声明式事务 --&amp;gt; &amp;lt;tx:annotation-driven transaction-manager=&amp;quot;transactionManager&amp;quot; proxy-target-class=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;!</description>
    </item>
    
  </channel>
</rss>