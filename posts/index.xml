<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 首页</title>
    <link>https://wjw66.github.io/posts/</link>
    <description>Recent content in Posts on 首页</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wjw66.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Lambda的使用</title>
      <link>https://wjw66.github.io/2019/lambda%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wjw66.github.io/2019/lambda%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>Lambda 什么是Lambda?我们知道，对于一个Java变量，我们可以赋给其一个“值”。
如果你想把“一块代码”赋给一个Java变量，应该怎么做呢？比如，我想把右边那块代码，赋给一个叫做aBlockOfCode的Java变量：
在Java 8之前，这个是做不到的。但是Java 8问世之 后，利用Lambda特性，就可以做到了。
当然，这个并不是一个很简洁的写法。所以，为了使这个赋值操作更加elegant, 我们可以移除一些没用的声明。
这样，我们就成功的非常优雅的把“一块代码”赋给了一个变量。而“这块代码”，或者说“这个被赋给一个变量的函数”，就是一个Lambda表达式。但是这里仍然有一个问题，就是变量aBlockOfCode的类型应该是什么？在Java 8里面，所有的Lambda的类型都是一个接口，而Lambda表达式本身，也就是”那段代码“，需要是这个接口的实现。这是我认为理解Lambda的一个关键所在，简而言之就是，Lambda表达式本身就是一个接口的实现。直接这样说可能还是有点让人困扰，我们继续看看例子。我们给上面的aBlockOfCode加上一个类型：
这种只有一个接口函数需要被实现的接口类型，我们叫它”函数式接口“。为了避免后来的人在这个接口中增加接口函数导致其有多个接口函数需要被实现，变成&amp;rdquo;非函数接口”，我们可以在这个上面加上一个声明@FunctionalInterface, 这样别人就无法在里面添加新的接口函数了：
这样，我们就得到了一个完整的Lambda表达式声明：
Lambda表达式有什么作用?最直观的作用就是使得代码变得异常简洁。我们可以对比一下Lambda表达式和传统的Java对同一个接口的实现：这两种写法本质上是等价的。但是显然，Java 8中的写法更加优雅简洁。并且，由于Lambda可以直接赋值给一个变量，我们就可以直接把Lambda作为参数传给函数, 而传统的Java必须有明确的接口实现的定义，初始化才行：有些情况下，这个接口实现只需要用到一次。传统的Java 7必须要求你定义一个“污染环境”的接口实现MyInterfaceImpl，而相较之下Java 8的Lambda, 就显得干净很多。
Lambda结合FunctionalInterface Lib, forEach, stream()，method reference等新特性可以使代码变的更加简洁！直接上例子。假设Person的定义和List的值都给定。
现在需要你打印出guiltyPersons List里面所有LastName以&amp;rdquo;Z&amp;rdquo;开头的人的FirstName。原生态Lambda写法：定义两个函数式接口，定义一个静态函数，调用静态函数并给参数赋值Lambda表达式。
这个代码实际上已经比较简洁了，但是我们还可以更简洁么？当然可以。在Java 8中有一个函数式接口的包，里面定义了大量可能用到的函数式接口（java.util.function (Java Platform SE 8 )）。所以，我们在这里压根都不需要定义NameChecker和Executor这两个函数式接口，直接用Java 8函数式接口包里的Predicate和Consumer就可以了——因为他们这一对的接口定义和NameChecker/Executor其实是一样的。
第一步简化 - 利用函数式接口包：
静态函数里面的for each循环其实是非常碍眼的。这里可以利用Iterable自带的forEach()来替代。forEach()本身可以接受一个Consumer 参数。第二步简化 - 用Iterable.forEach()取代foreach loop：
由于静态函数其实只是对List进行了一通操作，这里我们可以甩掉静态函数，直接使用stream()特性来完成。stream()的几个方法都是接受Predicate，Consumer等参数的（java.util.stream (Java Platform SE 8 )）。你理解了上面的内容，stream()这里就非常好理解了，并不需要多做解释。第三步简化 - 利用stream()替代静态函数：
对比最开始的Lambda写法，这里已经非常非常简洁了。但是如果，我们的要求变一下，变成print这个人的全部信息，及p -&amp;gt;
System.out.println(p); 那么还可以利用Method reference来继续简化。所谓Method reference, 就是用已经写好的别的Object/Class的method来代替Lambda expression。格式如下：
第四步简化 - 如果是println(p)，则可以利用Method reference代替forEach中的Lambda表达式：
这基本上就是能写的最简洁的版本了。
Lambda配合Optional可以使Java对于null的处理变的异常优雅这里假设我们有一个person object，以及一个person object的Optional wrapper:</description>
    </item>
    
    <item>
      <title>logback 简介</title>
      <link>https://wjw66.github.io/2019/logback/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wjw66.github.io/2019/logback/</guid>
      <description>logback 简介  logback 官网：https://logback.qos.ch/
 目前还没有看过日志类框架的源码，仅限于如何使用。所以就不说那些“空话”了。最直观的认知是：
 logback和log4j是一个人写的 springboot默认使用的日志框架是logback。 三个模块组成 logback-core logback-classic logback-access  其他的关于性能，关于内存占用，关于测试，关于文档详见源码及官网说明
logback-core 是其它模块的基础设施，其它模块基于它构建，显然，logback-core 提供了一些关键的通用机制。logback-classic 的地位和作用等同于 Log4J，它也被认为是 Log4J 的一个改进版，并且它实现了简单日志门面 SLF4J；而 logback-access 主要作为一个与 Servlet 容器交互的模块，比如说tomcat或者 jetty，提供一些与 HTTP 访问相关的功能。
配置文件详解 这部分主要来学习下logback配置文件的一些配置项。
configuration 先来看这张图，这个结构就是整个logback.xml配置文件的结构。
对应来看下配置文件：
&amp;lt;configuration scan=&amp;quot;true&amp;quot; scanPeriod=&amp;quot;60 seconds&amp;quot; debug=&amp;quot;false&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;glmapper-name&amp;quot; value=&amp;quot;glmapper-demo&amp;quot; /&amp;gt; &amp;lt;contextName&amp;gt;${glmapper-name}&amp;lt;/contextName&amp;gt; &amp;lt;appender&amp;gt; //xxxx &amp;lt;/appender&amp;gt; &amp;lt;logger&amp;gt; //xxxx &amp;lt;/logger&amp;gt; &amp;lt;root&amp;gt; //xxxx &amp;lt;/root&amp;gt; &amp;lt;/configuration&amp;gt;   ps：想使用spring扩展profile支持，要以logback-spring.xml命名，其他如property需要改为springProperty
  scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。  contextName 每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用contextName标签设置成其他名字，用于区分不同应用程序的记录
property 用来定义变量值的标签，property标签有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。通过property定义的值会被插入到logger上下文中。定义变量后，可以使“${name}”来使用变量。如上面的xml所示。</description>
    </item>
    
    <item>
      <title>QQ、微博授权登录</title>
      <link>https://wjw66.github.io/2019/qq%E5%BE%AE%E5%8D%9A%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wjw66.github.io/2019/qq%E5%BE%AE%E5%8D%9A%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/</guid>
      <description>QQ、微博授权登录 1 前言
个人网站最近增加了评论功能，为了方便用户不用注册就可以评论，对接了 QQ 和微博这 2 大常用软件的一键登录，总的来说其实都挺简单的，可能会有一点小坑，但不算多，完整记录下来方便后来人快速对接。
2 后台设计
在真正开始对接之前，我们先来聊一聊后台的方案设计。既然是对接第三方登录，那就免不了如何将用户信息保存。首先需要明确一点的是，用户在第三方登录成功之后，我们能拿到的仅仅是一个代表用户唯一身份的ID（微博是真实uid，QQ是加密的openId）以及用来识别身份的accessToken，当然还有昵称、头像、性别等有限资料，对接第三方登录的关键就是如何确定用户是合法登录，如果确定这次登录的和上次登录的是同一个人并且不是假冒的。
其实这个并不用我们特别操心，就以微博登录为例，用户登录成功之后会回调一个code 给我们，然后我们再拿code去微博那换取accessToken，如果这个code是用户乱填的，那这一关肯定过不了，所以，前面的担心有点多余。
另外一个问题就是如何和现有用户系统打通，有的网站在用户已经登录成功之后还要用户输入手机号和验证码，或者要用户重新注册账号和密码来绑定第三方账户，感觉这种实现用户体验非常差，碰到这种网站我一般都是直接关掉，都已经登录了还让用户注册，什么鬼！由于我做的是评论功能，我并不希望评论用户和现有用户表打通，所以就不存在这件事了，如果想打通的话，我觉得无非就是登录成功之后默认往老用户表插入一条数据，然后和OpenUser表关联起来，判断用户是否登录时把OpenUser的鉴权也加进去就OK了。
本文的后台以Java为例。
2.1 数据库设计
再来说说数据库设计，为了系统的扩展性，我有一个专门的OpenUser表用来存放第三方登录用户，主要字段如下：
这样设计理论上就可以无限扩展了。
2.2 鉴权流程
这里我只是说说我的方案，把accessToken写入cookie肯定是不安全的，因为accessToken相当于是第三方网站的临时密码，被别人窃取了就可以随意拿来干坏事了。可以在用户登录成功之后我们自己生成一个token，这样的token即使泄露了顶多就是被人拿来随意评论，损失不大，但是如果accessToken被泄露了，以微博为例，人家可以利用这个accessToken随意发微博、删微博、加关注等等，很危险。当然，如果不想token泄露的话也可以通过绑定IP等方式来限制。
鉴权的话就是首先判断cookie中是否有我们自己的token，然后判断是否合法，合法再判断第三方授权是否已过期等等。
3 QQ登录
3.1 实名认证
QQ登录我们对接的是QQ互联，地址：https://connect.qq.com ,首先需要注册成为开发者并实名认证，需要手持身份证照片，具体就不讲了。
3.2 创建应用
进入应用管理页面(https://connect.qq.com/manage.html#/)创建应用，根据实际需要是创建网站应用还是移动应用，我这里是网站应用：
第一步：
第二步：
提交完之后会自动提交审核，基本上就是审核你的资料和备案的资料是否一致，所有资料必须和备案资料一模一样，否则审核不会通过：
当然，这些资料后面还是可以修改的。申请成功之后你会得到appId和appKey。
3.3. 引导用户登录
这里可以下载一些视觉素材，在页面合适位置放一个QQ登录按钮，点击时引导用户进入授权页面：
代码：
function openWindow(url, width, height){ width = width || 600; height = height || 400; var left = (window.screen.width - width) / 2; var top = (window.screen.height - height) / 2; window.</description>
    </item>
    
    <item>
      <title>SpringBoot配置application.yml</title>
      <link>https://wjw66.github.io/2019/springboot%E9%85%8D%E7%BD%AEapplication.yml%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wjw66.github.io/2019/springboot%E9%85%8D%E7%BD%AEapplication.yml%E8%AF%A6%E8%A7%A3/</guid>
      <description>server: prot: 8888　#配置访问的端口 servlet: context-path: /xxx　#配置访问时的项目名 spring: devtools:　restart: enabled: true　#这个好像是热加载，每次代码有改动就自动重启，原来的restart ClassLoader 被丢弃，重新创建一个restart ClassLoader，由于需要加载的类相比较少，所以实现了较快的重启时间。 datasource: url: jdbc:mysql://localhost:3306/xxx?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;useSSL=true　#配置数据库的路径 username: root　#数据库登录名 password: root #登陆密码 type: com.alibaba.druid.pool.DruidDataSource #这个可以看一下https://blog.csdn.net/qq_27191423/article/details/79146855 driver-class-name: com.mysql.jdbc.Driver filters: stat maxActive: 20　#连接池的最大值，同一时间可以从池分配的最多连接数量，0时无限制 initialSize: 1　#连接初始值，连接池启动时创建的连接数量的初始值 maxWait: 60000 minIdle: 1　#最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 timeBetweenEvictionRunsMillis: 60000 minEvictableIdleTimeMillis: 300000 validationQuery: select &#39;x&#39; testWhileIdle: true testOnBorrow: false testOnReturn: false poolPreparedStatements: true #是否对已备语句进行池管理（布尔值），是否对PreparedStatement进行缓存 maxOpenPreparedStatements: 20 jackson: date-format: yyyy-MM-dd HH:mm:ss time-zone: GMT+8 mybatis-plus: mapper-locations: classpath*:mapper/**/*Mapper.</description>
    </item>
    
    <item>
      <title>SpringData-jpa</title>
      <link>https://wjw66.github.io/2019/spring-data-jpa%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wjw66.github.io/2019/spring-data-jpa%E8%AF%A6%E8%A7%A3/</guid>
      <description>这篇文章由于介绍的类容很全，因此很长，如果你需要，那么可以耐心的看完，本人经历了很长时间的学识，使用，研究的心血浓缩成为这么短短的一篇博客。
大致整理一个提纲：
　1、Spring-data-jpa的基本介绍；
　2、和Spring整合；
　3、基本的使用方式；
　4、复杂查询，包括多表关联，分页，排序等；
现在开始：
　1、Spring-data-jpa的基本介绍：JPA诞生的缘由是为了整合第三方ORM框架，建立一种标准的方式，百度百科说是JDK为了实现ORM的天下归一，目前也是在按照这个方向发展，但是还没能完全实现。在ORM框架中，Hibernate是一支很大的部队，使用很广泛，也很方便，能力也很强，同时Hibernate也是和JPA整合的比较良好，我们可以认为JPA是标准，事实上也是，JPA几乎都是接口，实现都是Hibernate在做，宏观上面看，在JPA的统一之下Hibernate很良好的运行。
　上面阐述了JPA和Hibernate的关系，那么Spring-data-jpa又是个什么东西呢？这地方需要稍微解释一下，我们做Java开发的都知道Spring的强大，到目前为止，企业级应用Spring几乎是无所不能，无所不在，已经是事实上的标准了，企业级应用不使用Spring的几乎没有，这样说没错吧。而Spring整合第三方框架的能力又很强，他要做的不仅仅是个最早的IOC容器这么简单一回事，现在Spring涉及的方面太广，主要是体现在和第三方工具的整合上。而在与第三方整合这方面，Spring做了持久化这一块的工作，我个人的感觉是Spring希望把持久化这块内容也拿下。于是就有了Spring-data-**这一系列包。包括，Spring-data-jpa,Spring-data-template,Spring-data-mongodb,Spring-data-redis，还有个民间产品，mybatis-spring，和前面类似，这是和mybatis整合的第三方包，这些都是干的持久化工具干的事儿。
　这里介绍Spring-data-jpa，表示与jpa的整合。
　2、我们都知道，在使用持久化工具的时候，一般都有一个对象来操作数据库，在原生的Hibernate中叫做Session，在JPA中叫做EntityManager，在MyBatis中叫做SqlSession，通过这个对象来操作数据库。我们一般按照三层结构来看的话，Service层做业务逻辑处理，Dao层和数据库打交道，在Dao中，就存在着上面的对象。那么ORM框架本身提供的功能有什么呢？答案是基本的CRUD，所有的基础CRUD框架都提供，我们使用起来感觉很方便，很给力，业务逻辑层面的处理ORM是没有提供的，如果使用原生的框架，业务逻辑代码我们一般会自定义，会自己去写SQL语句，然后执行。在这个时候，Spring-data-jpa的威力就体现出来了，ORM提供的能力他都提供，ORM框架没有提供的业务逻辑功能Spring-data-jpa也提供，全方位的解决用户的需求。使用Spring-data-jpa进行开发的过程中，常用的功能，我们几乎不需要写一条sql语句，至少在我看来，企业级应用基本上可以不用写任何一条sql，当然spring-data-jpa也提供自己写sql的方式，这个就看个人怎么选择，都可以。我觉得都行。
　2.1与Spring整合我们从spring配置文件开始，为了节省篇幅，这里我只写出配置文件的结构。
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:p=&amp;quot;http://www.springframework.org/schema/p&amp;quot; xmlns:aop=&amp;quot;http://www.springframework.org/schema/aop&amp;quot; xmlns:tx=&amp;quot;http://www.springframework.org/schema/tx&amp;quot; xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot; xmlns:mongo=&amp;quot;http://www.springframework.org/schema/data/mongo&amp;quot; xmlns:jpa=&amp;quot;http://www.springframework.org/schema/data/jpa&amp;quot; xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd&amp;quot;&amp;gt; &amp;lt;!-- 数据库连接 --&amp;gt; &amp;lt;context:property-placeholder location=&amp;quot;classpath:your-config.properties&amp;quot; ignore-unresolvable=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;!-- service包 --&amp;gt; &amp;lt;context:component-scan base-package=&amp;quot;your service package&amp;quot; /&amp;gt; &amp;lt;!-- 使用cglib进行动态代理 --&amp;gt; &amp;lt;aop:aspectj-autoproxy proxy-target-class=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;!-- 支持注解方式声明式事务 --&amp;gt; &amp;lt;tx:annotation-driven transaction-manager=&amp;quot;transactionManager&amp;quot; proxy-target-class=&amp;quot;true&amp;quot; /&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>让代码性能更高</title>
      <link>https://wjw66.github.io/2019/%E8%AE%A9%E4%BB%A3%E7%A0%81%E6%80%A7%E8%83%BD%E6%9B%B4%E9%AB%98/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wjw66.github.io/2019/%E8%AE%A9%E4%BB%A3%E7%A0%81%E6%80%A7%E8%83%BD%E6%9B%B4%E9%AB%98/</guid>
      <description>让代码性能更高 需要 Map 的主键和取值时，应该迭代 entrySet()
当循环中只需要 Map 的主键时，迭代 keySet() 是正确的。但是，当需要主键和取值时，迭代 entrySet() 才是更高效的做法，比先迭代 keySet() 后再去 get 取值性能更佳。
反例：
Map&amp;lt;String, String&amp;gt; map = ...; for (String key : map.keySet()) { String value = map.get(key); ... }  正例：
Map&amp;lt;String, String&amp;gt; map = ...; for (Map.Entry&amp;lt;String, String&amp;gt; entry : map.entrySet()) { String key = entry.getKey(); String value = entry.getValue(); ... }  应该使用Collection.isEmpty()检测空
使用 Collection.size() 来检测空逻辑上没有问题，但是使用 Collection.isEmpty()使得代码更易读，并且可以获得更好的性能。任何 Collection.isEmpty() 实现的时间复杂度都是 O(1) ，但是某些 Collection.size() 实现的时间复杂度可能是 O(n) 。</description>
    </item>
    
    <item>
      <title>IDEA如何导入运行已完成的项目</title>
      <link>https://wjw66.github.io/2019/idea%E5%A6%82%E4%BD%95%E5%AF%BC%E5%85%A5%E8%BF%90%E8%A1%8C%E5%B7%B2%E5%AE%8C%E6%88%90%E7%9A%84%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Thu, 15 Aug 2019 09:50:41 +0800</pubDate>
      
      <guid>https://wjw66.github.io/2019/idea%E5%A6%82%E4%BD%95%E5%AF%BC%E5%85%A5%E8%BF%90%E8%A1%8C%E5%B7%B2%E5%AE%8C%E6%88%90%E7%9A%84%E9%A1%B9%E7%9B%AE/</guid>
      <description>首先：Open打开自己解压好的项目 先创建自己的项目然后用Module的方式打开也可以（配置过程大致相同）  选择项目：  配置项目结构  配置过程（看图）  配置modules 配置Sources文件  配置依赖jar包  找到项目的lib文件，然后点OK  配置Tomcat的Library弹出的对话框中选择自己的Tomcat版本，例如我的是8.5.31  配置Artifacts   配置Tomcat服务器（必须完成Artifacts配置才能成功配置Tomcat） 完成后点OK   至此简单的项目就配置完成了！点击运行启动服务器吧 说明：如果网页出现404一般是项目的路径不正确，在Tomcat中重新更改下项目路径即可</description>
    </item>
    
    <item>
      <title>String类型为什么不可变</title>
      <link>https://wjw66.github.io/2019/string%E7%B1%BB%E5%9E%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%8F%AF%E5%8F%98/</link>
      <pubDate>Wed, 14 Aug 2019 23:22:58 +0800</pubDate>
      
      <guid>https://wjw66.github.io/2019/string%E7%B1%BB%E5%9E%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%8F%AF%E5%8F%98/</guid>
      <description>String类概述 java.lang.String类代表字符串。Java程序中所有的字符串文字（例如&amp;rdquo;abc&amp;rdquo; ）都可以被看作是实现此类的实例。 类 String 中包括用于检查各个字符串的方法，比如用于比较字符串，搜索字符串，提取子字符串以及创建具有翻译为大写或小写的所有字符的字符串的副本。
String类特点  字符串不变：字符串的值在创建后不能被更改。
String s1 = &amp;quot;abc&amp;quot;; s1 += &amp;quot;d&amp;quot;; System.out.println(s1); //输出 &amp;quot;abcd&amp;quot;  说明: 内存中有&amp;rdquo;abc&amp;rdquo;，&amp;rdquo;abcd&amp;rdquo;两个对象，s1从指向&amp;rdquo;abc&amp;rdquo;，改变指向，指向了&amp;rdquo;abcd&amp;rdquo;；说明s1指向的内存地址改变了，但内存中&amp;rdquo;abc&amp;rdquo;对象依旧存在，只是在运算的时候又&amp;rdquo;new&amp;rdquo;了一个&amp;rdquo;abcd&amp;rdquo;对象。
 因为String对象是不可变的（为什么不可变？下文会一一解惑），所以它们可以被共享。
String s1 = &amp;quot;abc&amp;quot;; String s2 = &amp;quot;abc&amp;quot;; // 内存中只有一个&amp;quot;abc&amp;quot;对象被创建，同时被s1和s2共享。  &amp;ldquo;abc&amp;rdquo; 等效于 char[] data={ &amp;lsquo;a&amp;rsquo; , &amp;lsquo;b&amp;rsquo; , &amp;lsquo;c&amp;rsquo; } 。
例如： String str = &amp;quot;abc&amp;quot;; 相当于： char data[] = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;}; String str = new String(data);  &amp;ensp;&amp;ensp;说明： String底层是靠字符数组char[]实现的。
  String对象为什么是不可变的？ public final class String implements java.</description>
    </item>
    
    <item>
      <title>JDK源码阅读顺序</title>
      <link>https://wjw66.github.io/2019/jdk%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Wed, 13 Mar 2019 16:00:42 +0800</pubDate>
      
      <guid>https://wjw66.github.io/2019/jdk%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E9%A1%BA%E5%BA%8F/</guid>
      <description>标题为包名，后面序号为优先级1-4，优先级递减，建议按优先级顺序看
1、java.lang 1) Object 1 2) String 1 3) AbstractStringBuilder 1 4) StringBuffer 1 5) StringBuilder 1 6) Boolean 2 7) Byte 2 8) Double 2 9) Float 2 10) Integer 2 11) Long 2 12) Short 2 13) Thread 2 14) ThreadLocal 2 15) Enum 3 16) Throwable 3 17) Error 3 18) Exception 3 19) Class 4 20) ClassLoader 4 21) Compiler 4 22) System 4 23) Package 4 24) Void 4  2、java.</description>
    </item>
    
    <item>
      <title>Hugo的基本用法和页面改造</title>
      <link>https://wjw66.github.io/1/hugo%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%E5%92%8C%E9%A1%B5%E9%9D%A2%E6%94%B9%E9%80%A0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wjw66.github.io/1/hugo%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%E5%92%8C%E9%A1%B5%E9%9D%A2%E6%94%B9%E9%80%A0/</guid>
      <description>概念 hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。
主要用于个人Blog、项目文档、初创公司站点构建。
hugo的下载安装很简单，可以参考官方的quickstart，本文主要介绍一下hugo框架的基本概念和工作原理。
目录结构 命令：hugo new site blog
blog ├── archetypes ├── config.toml ├── content ├── data ├── layouts ├── static ├── themes └── public archetypes  在通过命令窗口hugo new xxx 创建内容页面的时候，默认情况下hugo会创建date、title等front matter，可以通过在archetypes目录下创建文件，设置自定义的front matter。
config.toml
所有的hugo站点都有一个全局配置文件，用来配置整个站点的信息，hugo默认提供了跟多配置指令。
content
站点下所有的内容页面，也就是我们创建的md文件都在这个content目录下面。
data
data目录用来存储网站用到一些配置、数据文件。文件类型可以是yaml|toml|json等格式。
layouts
存放用来渲染content目录下面内容的模版文件，模版.html格式结尾，layouts可以同时存储在项目目录和themes//layouts目录下。
static
用来存储图片、css、js等静态资源文件。
themes
用来存储主题，主题可以方便的帮助我们快速建立站点，也可以方便的切换网站的风格样式。
public
hugo编译后生成网站的所有文件都存储在这里面，把这个目录放到任意web服务器就可以发布网站成功。
页面绑定 Page bundles** hugo中的内容组织是依赖Page Bundles来管理的。Page Bundles包括Leaf Bundle（没有子节点）和Branch Bundle（home page, section, taxonomy terms, taxonomy list）两类。
Leaf Bundle Branch Bundle 索引文件 index.md _index.md 布局类型 single list 嵌套 不允许嵌套 允许Leaf或Branch Bundle嵌套 Section section是基于content/目录下的组织结构定义的页面集合。</description>
    </item>
    
  </channel>
</rss>