<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jdk8新特性 on 首页</title>
    <link>https://wjw66.github.io/tags/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/</link>
    <description>Recent content in jdk8新特性 on 首页</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wjw66.github.io/tags/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Lambda的使用</title>
      <link>https://wjw66.github.io/2019/lambda%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wjw66.github.io/2019/lambda%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>Lambda 什么是Lambda?我们知道，对于一个Java变量，我们可以赋给其一个“值”。
如果你想把“一块代码”赋给一个Java变量，应该怎么做呢？比如，我想把右边那块代码，赋给一个叫做aBlockOfCode的Java变量：
在Java 8之前，这个是做不到的。但是Java 8问世之 后，利用Lambda特性，就可以做到了。
当然，这个并不是一个很简洁的写法。所以，为了使这个赋值操作更加elegant, 我们可以移除一些没用的声明。
这样，我们就成功的非常优雅的把“一块代码”赋给了一个变量。而“这块代码”，或者说“这个被赋给一个变量的函数”，就是一个Lambda表达式。但是这里仍然有一个问题，就是变量aBlockOfCode的类型应该是什么？在Java 8里面，所有的Lambda的类型都是一个接口，而Lambda表达式本身，也就是”那段代码“，需要是这个接口的实现。这是我认为理解Lambda的一个关键所在，简而言之就是，Lambda表达式本身就是一个接口的实现。直接这样说可能还是有点让人困扰，我们继续看看例子。我们给上面的aBlockOfCode加上一个类型：
这种只有一个接口函数需要被实现的接口类型，我们叫它”函数式接口“。为了避免后来的人在这个接口中增加接口函数导致其有多个接口函数需要被实现，变成&amp;rdquo;非函数接口”，我们可以在这个上面加上一个声明@FunctionalInterface, 这样别人就无法在里面添加新的接口函数了：
这样，我们就得到了一个完整的Lambda表达式声明：
Lambda表达式有什么作用?最直观的作用就是使得代码变得异常简洁。我们可以对比一下Lambda表达式和传统的Java对同一个接口的实现：这两种写法本质上是等价的。但是显然，Java 8中的写法更加优雅简洁。并且，由于Lambda可以直接赋值给一个变量，我们就可以直接把Lambda作为参数传给函数, 而传统的Java必须有明确的接口实现的定义，初始化才行：有些情况下，这个接口实现只需要用到一次。传统的Java 7必须要求你定义一个“污染环境”的接口实现MyInterfaceImpl，而相较之下Java 8的Lambda, 就显得干净很多。
Lambda结合FunctionalInterface Lib, forEach, stream()，method reference等新特性可以使代码变的更加简洁！直接上例子。假设Person的定义和List的值都给定。
现在需要你打印出guiltyPersons List里面所有LastName以&amp;rdquo;Z&amp;rdquo;开头的人的FirstName。原生态Lambda写法：定义两个函数式接口，定义一个静态函数，调用静态函数并给参数赋值Lambda表达式。
这个代码实际上已经比较简洁了，但是我们还可以更简洁么？当然可以。在Java 8中有一个函数式接口的包，里面定义了大量可能用到的函数式接口（java.util.function (Java Platform SE 8 )）。所以，我们在这里压根都不需要定义NameChecker和Executor这两个函数式接口，直接用Java 8函数式接口包里的Predicate和Consumer就可以了——因为他们这一对的接口定义和NameChecker/Executor其实是一样的。
第一步简化 - 利用函数式接口包：
静态函数里面的for each循环其实是非常碍眼的。这里可以利用Iterable自带的forEach()来替代。forEach()本身可以接受一个Consumer 参数。第二步简化 - 用Iterable.forEach()取代foreach loop：
由于静态函数其实只是对List进行了一通操作，这里我们可以甩掉静态函数，直接使用stream()特性来完成。stream()的几个方法都是接受Predicate，Consumer等参数的（java.util.stream (Java Platform SE 8 )）。你理解了上面的内容，stream()这里就非常好理解了，并不需要多做解释。第三步简化 - 利用stream()替代静态函数：
对比最开始的Lambda写法，这里已经非常非常简洁了。但是如果，我们的要求变一下，变成print这个人的全部信息，及p -&amp;gt;
System.out.println(p); 那么还可以利用Method reference来继续简化。所谓Method reference, 就是用已经写好的别的Object/Class的method来代替Lambda expression。格式如下：
第四步简化 - 如果是println(p)，则可以利用Method reference代替forEach中的Lambda表达式：
这基本上就是能写的最简洁的版本了。
Lambda配合Optional可以使Java对于null的处理变的异常优雅这里假设我们有一个person object，以及一个person object的Optional wrapper:</description>
    </item>
    
  </channel>
</rss>