<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java基础 on 首页</title>
    <link>https://wjw66.github.io/tags/java%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in Java基础 on 首页</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wjw66.github.io/tags/java%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Lambda的使用</title>
      <link>https://wjw66.github.io/2019/lambda%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wjw66.github.io/2019/lambda%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>Lambda 什么是Lambda?我们知道，对于一个Java变量，我们可以赋给其一个“值”。
如果你想把“一块代码”赋给一个Java变量，应该怎么做呢？比如，我想把右边那块代码，赋给一个叫做aBlockOfCode的Java变量：
在Java 8之前，这个是做不到的。但是Java 8问世之 后，利用Lambda特性，就可以做到了。
当然，这个并不是一个很简洁的写法。所以，为了使这个赋值操作更加elegant, 我们可以移除一些没用的声明。
这样，我们就成功的非常优雅的把“一块代码”赋给了一个变量。而“这块代码”，或者说“这个被赋给一个变量的函数”，就是一个Lambda表达式。但是这里仍然有一个问题，就是变量aBlockOfCode的类型应该是什么？在Java 8里面，所有的Lambda的类型都是一个接口，而Lambda表达式本身，也就是”那段代码“，需要是这个接口的实现。这是我认为理解Lambda的一个关键所在，简而言之就是，Lambda表达式本身就是一个接口的实现。直接这样说可能还是有点让人困扰，我们继续看看例子。我们给上面的aBlockOfCode加上一个类型：
这种只有一个接口函数需要被实现的接口类型，我们叫它”函数式接口“。为了避免后来的人在这个接口中增加接口函数导致其有多个接口函数需要被实现，变成&amp;rdquo;非函数接口”，我们可以在这个上面加上一个声明@FunctionalInterface, 这样别人就无法在里面添加新的接口函数了：
这样，我们就得到了一个完整的Lambda表达式声明：
Lambda表达式有什么作用?最直观的作用就是使得代码变得异常简洁。我们可以对比一下Lambda表达式和传统的Java对同一个接口的实现：这两种写法本质上是等价的。但是显然，Java 8中的写法更加优雅简洁。并且，由于Lambda可以直接赋值给一个变量，我们就可以直接把Lambda作为参数传给函数, 而传统的Java必须有明确的接口实现的定义，初始化才行：有些情况下，这个接口实现只需要用到一次。传统的Java 7必须要求你定义一个“污染环境”的接口实现MyInterfaceImpl，而相较之下Java 8的Lambda, 就显得干净很多。
Lambda结合FunctionalInterface Lib, forEach, stream()，method reference等新特性可以使代码变的更加简洁！直接上例子。假设Person的定义和List的值都给定。
现在需要你打印出guiltyPersons List里面所有LastName以&amp;rdquo;Z&amp;rdquo;开头的人的FirstName。原生态Lambda写法：定义两个函数式接口，定义一个静态函数，调用静态函数并给参数赋值Lambda表达式。
这个代码实际上已经比较简洁了，但是我们还可以更简洁么？当然可以。在Java 8中有一个函数式接口的包，里面定义了大量可能用到的函数式接口（java.util.function (Java Platform SE 8 )）。所以，我们在这里压根都不需要定义NameChecker和Executor这两个函数式接口，直接用Java 8函数式接口包里的Predicate和Consumer就可以了——因为他们这一对的接口定义和NameChecker/Executor其实是一样的。
第一步简化 - 利用函数式接口包：
静态函数里面的for each循环其实是非常碍眼的。这里可以利用Iterable自带的forEach()来替代。forEach()本身可以接受一个Consumer 参数。第二步简化 - 用Iterable.forEach()取代foreach loop：
由于静态函数其实只是对List进行了一通操作，这里我们可以甩掉静态函数，直接使用stream()特性来完成。stream()的几个方法都是接受Predicate，Consumer等参数的（java.util.stream (Java Platform SE 8 )）。你理解了上面的内容，stream()这里就非常好理解了，并不需要多做解释。第三步简化 - 利用stream()替代静态函数：
对比最开始的Lambda写法，这里已经非常非常简洁了。但是如果，我们的要求变一下，变成print这个人的全部信息，及p -&amp;gt;
System.out.println(p); 那么还可以利用Method reference来继续简化。所谓Method reference, 就是用已经写好的别的Object/Class的method来代替Lambda expression。格式如下：
第四步简化 - 如果是println(p)，则可以利用Method reference代替forEach中的Lambda表达式：
这基本上就是能写的最简洁的版本了。
Lambda配合Optional可以使Java对于null的处理变的异常优雅这里假设我们有一个person object，以及一个person object的Optional wrapper:</description>
    </item>
    
    <item>
      <title>logback 简介</title>
      <link>https://wjw66.github.io/2019/logback/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wjw66.github.io/2019/logback/</guid>
      <description>logback 简介  logback 官网：https://logback.qos.ch/
 目前还没有看过日志类框架的源码，仅限于如何使用。所以就不说那些“空话”了。最直观的认知是：
 logback和log4j是一个人写的 springboot默认使用的日志框架是logback。 三个模块组成 logback-core logback-classic logback-access  其他的关于性能，关于内存占用，关于测试，关于文档详见源码及官网说明
logback-core 是其它模块的基础设施，其它模块基于它构建，显然，logback-core 提供了一些关键的通用机制。logback-classic 的地位和作用等同于 Log4J，它也被认为是 Log4J 的一个改进版，并且它实现了简单日志门面 SLF4J；而 logback-access 主要作为一个与 Servlet 容器交互的模块，比如说tomcat或者 jetty，提供一些与 HTTP 访问相关的功能。
配置文件详解 这部分主要来学习下logback配置文件的一些配置项。
configuration 先来看这张图，这个结构就是整个logback.xml配置文件的结构。
对应来看下配置文件：
&amp;lt;configuration scan=&amp;quot;true&amp;quot; scanPeriod=&amp;quot;60 seconds&amp;quot; debug=&amp;quot;false&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;glmapper-name&amp;quot; value=&amp;quot;glmapper-demo&amp;quot; /&amp;gt; &amp;lt;contextName&amp;gt;${glmapper-name}&amp;lt;/contextName&amp;gt; &amp;lt;appender&amp;gt; //xxxx &amp;lt;/appender&amp;gt; &amp;lt;logger&amp;gt; //xxxx &amp;lt;/logger&amp;gt; &amp;lt;root&amp;gt; //xxxx &amp;lt;/root&amp;gt; &amp;lt;/configuration&amp;gt;   ps：想使用spring扩展profile支持，要以logback-spring.xml命名，其他如property需要改为springProperty
  scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。  contextName 每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用contextName标签设置成其他名字，用于区分不同应用程序的记录
property 用来定义变量值的标签，property标签有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。通过property定义的值会被插入到logger上下文中。定义变量后，可以使“${name}”来使用变量。如上面的xml所示。</description>
    </item>
    
    <item>
      <title>让代码性能更高</title>
      <link>https://wjw66.github.io/2019/%E8%AE%A9%E4%BB%A3%E7%A0%81%E6%80%A7%E8%83%BD%E6%9B%B4%E9%AB%98/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wjw66.github.io/2019/%E8%AE%A9%E4%BB%A3%E7%A0%81%E6%80%A7%E8%83%BD%E6%9B%B4%E9%AB%98/</guid>
      <description>让代码性能更高 需要 Map 的主键和取值时，应该迭代 entrySet()
当循环中只需要 Map 的主键时，迭代 keySet() 是正确的。但是，当需要主键和取值时，迭代 entrySet() 才是更高效的做法，比先迭代 keySet() 后再去 get 取值性能更佳。
反例：
Map&amp;lt;String, String&amp;gt; map = ...; for (String key : map.keySet()) { String value = map.get(key); ... }  正例：
Map&amp;lt;String, String&amp;gt; map = ...; for (Map.Entry&amp;lt;String, String&amp;gt; entry : map.entrySet()) { String key = entry.getKey(); String value = entry.getValue(); ... }  应该使用Collection.isEmpty()检测空
使用 Collection.size() 来检测空逻辑上没有问题，但是使用 Collection.isEmpty()使得代码更易读，并且可以获得更好的性能。任何 Collection.isEmpty() 实现的时间复杂度都是 O(1) ，但是某些 Collection.size() 实现的时间复杂度可能是 O(n) 。</description>
    </item>
    
    <item>
      <title>String类型为什么不可变</title>
      <link>https://wjw66.github.io/2019/string%E7%B1%BB%E5%9E%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%8F%AF%E5%8F%98/</link>
      <pubDate>Wed, 14 Aug 2019 23:22:58 +0800</pubDate>
      
      <guid>https://wjw66.github.io/2019/string%E7%B1%BB%E5%9E%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%8F%AF%E5%8F%98/</guid>
      <description>String类概述 java.lang.String类代表字符串。Java程序中所有的字符串文字（例如&amp;rdquo;abc&amp;rdquo; ）都可以被看作是实现此类的实例。 类 String 中包括用于检查各个字符串的方法，比如用于比较字符串，搜索字符串，提取子字符串以及创建具有翻译为大写或小写的所有字符的字符串的副本。
String类特点  字符串不变：字符串的值在创建后不能被更改。
String s1 = &amp;quot;abc&amp;quot;; s1 += &amp;quot;d&amp;quot;; System.out.println(s1); //输出 &amp;quot;abcd&amp;quot;  说明: 内存中有&amp;rdquo;abc&amp;rdquo;，&amp;rdquo;abcd&amp;rdquo;两个对象，s1从指向&amp;rdquo;abc&amp;rdquo;，改变指向，指向了&amp;rdquo;abcd&amp;rdquo;；说明s1指向的内存地址改变了，但内存中&amp;rdquo;abc&amp;rdquo;对象依旧存在，只是在运算的时候又&amp;rdquo;new&amp;rdquo;了一个&amp;rdquo;abcd&amp;rdquo;对象。
 因为String对象是不可变的（为什么不可变？下文会一一解惑），所以它们可以被共享。
String s1 = &amp;quot;abc&amp;quot;; String s2 = &amp;quot;abc&amp;quot;; // 内存中只有一个&amp;quot;abc&amp;quot;对象被创建，同时被s1和s2共享。  &amp;ldquo;abc&amp;rdquo; 等效于 char[] data={ &amp;lsquo;a&amp;rsquo; , &amp;lsquo;b&amp;rsquo; , &amp;lsquo;c&amp;rsquo; } 。
例如： String str = &amp;quot;abc&amp;quot;; 相当于： char data[] = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;}; String str = new String(data);  &amp;ensp;&amp;ensp;说明： String底层是靠字符数组char[]实现的。
  String对象为什么是不可变的？ public final class String implements java.</description>
    </item>
    
  </channel>
</rss>